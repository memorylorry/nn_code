# 广播机制！！！
# https://numpy.org/doc/1.18/user/basics.broadcasting.html
# https://numpy.org/doc/1.18/user/theory.broadcasting.html#array-broadcasting-in-numpy
import numpy as np
a = np.arange(3)
b = 2 # 定义1个标量
c = np.array([2,2,2])
'''
今天呢，我们来探索下numpy中的高级用法——广播。

广播这个术语描述了，在不同类型的数组进行算术运算时，numpy会怎么处理；
在特定的场合，1个形状小的数组会通过广播机制扩展成1个大的数组，从而使得他们之间能够参与运算；
广播提供了一种矢量化数组操作的方法，所以在C中需要用循环实现，而在python中可以直接使用；
而广播实现这个功能，没有制造不必要的数据拷贝，并且它通常都采用了高效的算法实现；
当然，也存在广播机制不太理想的场合；因为它能导致内存利用率低，这将能降低计算效率；
这篇文章将要介绍了数字化的例子，同时也提示了何事不要去使用广播。
'''
'''
numpy的操作，通常是两个相同形状的数组之间的操作；而numpy的广播规则打破了这个限制；
最简单的广播规则，用在当1个数组和1个标量进行运算的时候。
'''
# 例1
print(a*c) # 其中c是1个全为2的数组

# 例2
print(a*b) # 其中b是标量，值为2
'''
参看这2个例子的结果，例2中的b等同于1个数组。
我们可以想象下，当a和b进行运算的时候，b被扩展成和a一样的形状了,就像数组c一样。（而扩展的方法，b中的新元素只是简单的拷贝原始的标量）
！值得强调的是，这个扩充的操作（或说广播），只是1个概念上的思想；numpy能够智能地去利用原有的标量，而不是真正地去拷贝出1数组。
所以说，广播可以做到尽可能省内存、提高计算效率的。其原因是，b是1个标量，不是数组，计算的时候不需要移动内存，相比b如果是1个数组，这大概提高了10%的效率。

[0 1 2] * [2 (2) (2)] = [0 2 4] # 其中打()的数字是利用广播机制扩充的 
'''

'''
# 对于是否2个数组有兼容的形状，以满足广播机制，可以用如下的一句话描述：
广播规则：
为了满足广播规则，每个数组的最后1个轴的数直 “必须相同” 或者 “存在1个数组的最后1个轴为1”。

The Broadcasting Rule (原话)：
In order to broadcast, the size of the trailing axes for both arrays in an operation must 
either be the same size or one of them must be one.

如果这个条件不满足，将会抛出1个ValueError('frames are not aligned')的异常，这表明数组的形状不兼容。

由广播机制产生的结果集的大小，完全由输入数组每个轴的最大值决定（从最后1个周开始往前比较）；
并且注意这里并没说2个数组需要拥有同样的纬度数！！！

如这个例子，你有1个256*256*3的数组（存的是RGB值），你想去放大它的值，你可以通过乘1个标量来实现。
    Image(3d array)  256 x 256 x 3
    Scale(1d array)              3
    Result(3d array) 256 x 256 x 3

下面，这个例子更一般，A和B的形状差别很大！但由于A的最后1个轴为1，所以满足广播机制。
    A(4d array)       8 x 1 x 6 x 1
    B(3d array)           7 x 1 x 5
    Result(4d array)  8 x 7 x 6 x 5 # 值得关注的，每个轴都是A、B对应轴的最大值，而计算时，对于这些缺失的数，都采用相同的1组数运算
'''
e = np.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])
f = np.array([0,1,2])
print(e+f) # 利用广播机制，e、f的最后1个轴都为3，满足条件。f被扩充成了理想的4*3矩阵
'''
    [ 0, 0, 0]       [ 0, 1, 2]       [ 0, 1, 2]
    [10,10,10]   +   [等同于上1行]  =   [11,12,13]       f的下面3行数据，都是广播扩充的，只是理念上的！！！
    [20,20,20]       [等同于上1行]      [21,22,23]
    [30,30,30]       [等同于上1行]      [31,32,33]
'''

'''
# 反例
对于 a(4,3)  和 b(4)是不能利用广播进行运算的，有于a最后1个轴为3，b的最后1个轴为4，不相同！且两者都不为1，故不满足广播机制；运算时，抛出异常。
'''